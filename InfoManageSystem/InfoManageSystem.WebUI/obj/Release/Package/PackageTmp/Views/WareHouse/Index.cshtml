
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Layout/_iFrameLayout.cshtml";
    ViewBag.tableName = "tb_warehouse";
}

<script type="text/javascript">
    $(function () {
        $("#tb_warehouse").bootstrapTable({
            dataType: 'json',
            contentType: "application/x-www-form-urlencoded",
            toolbar: "#toolbar",
            idField: "Id",
            method: 'GET',
            pagination: true,
            showRefresh: true,
            clickToSelect: true,
            cache: false,
            striped: true,
            sidePagination: "server",
            showColumns: true,
            pagination: true,
            pageNumber: 1,
            pageSize: 10,
            pageList: [10, 25, 50, 100],
            uniqueId: "Id",
            showExport: true,
            exportDataType: 'all',
            queryParams: queryParams,
            responseHandler: responseHandler,
            url: "/WareHouse/GetAllWareHouse",
            height: 450,
            columns: [{
                checkbox: true
            },
            {
                field: "Id",
                title: "仓库编号"
            },
            {
                field: "Name",
                title: "仓库名称",
                editable: {
                    type: 'text',
                    title: '仓库名称',
                    validate: function (v) {
                        if (!v) return '仓库名称不能为空';
                    }
                }
            },
            {
                field: "Location",
                title:"仓库位置",
                editable:{
                    type: 'text',
                    title:'仓库位置',
                    validate:function(v)
                    {
                        if(!v)
                           return "仓库位置不能为空"
                    }
                }
            },
            {
                field: "totalStorage",
                title:"仓库总存储量",
            },
            {
                field: "Capacity",
                title:"仓库容量",
                editable: {
                    type: 'select',
                    title: '仓库容量',
                    source:function()
                    {
                        var result = [];
                        $.ajax({
                            url: '/WareHouse/GetWareHosueTypeList',
                            async: false,
                            type: "get",
                            data: {},
                            success: function (data, status) {
                                $.each(data, function (key, value) {
                                    result.push({ value: value.Id, text: value.Title });
                                });
                            }
                        });
                        return result;
                    }
                }
            }]
            ,
            onEditableSave: function (field, row, oldValue, $el) {
                /*如果行数据的编号小于1的话，说明正在编辑新建的数据项，暂时不需要进行保存*/
                $("#tb_warehouse").bootstrapTable("resetView");
                if (row.Id < 0) {
                    return;
                }
                $.ajax({
                    type: "post",
                    url: "/WareHouse/UpdateWareHouse",
                    data: { wareHouse: row },
                    dataType: 'JSON',
                    success: function (data, status) {
                        if (status == "success"&&data.result==true) {
                            toastr.success('编辑成功！');
                        }
                        else
                        {
                            toastr.error('编辑失败,请稍后重试！');
                        }
                    },
                    error: function () {
                        toastr.error('编辑失败,请稍后重试！');
                    },
                    complete: function () {

                    }
                });
            }
            ,
            onCheck: function ()
            {
                if(!canDelete())
                {
                    delButton.addClass("disabled");
                }
            },
            onUncheck: function ()
            {
                if(canDelete())
                {
                    delButton.removeClass("disabled");
                }
            },
            onCheckAll: function () {
                if (!canDelete()) {
                    delButton.addClass("disabled");
                }
            },
            onUncheckAll: function () {
                if (canDelete()) {
                    delButton.removeClass("disabled");
                }
            }
        });
    });
    function queryParams(params) {
        var param = {
            pageindex: this.pageNumber,
            pageSize: this.pageSize
        }
        return param;
    }
    function responseHandler(res) {
        if (res) {
            return {
                "rows": res.rows,
                "total": res.total
            };
        } else {
            return {
                "rows": [],
                "total": 0
            };
        }
    }
    var delButton = $("#btn_delete");
    delButton.click(function () {
        if (!canDelete()) {
            toastr.error("对不起，不能进行删除！");
            return;
        }
        var rowSelected = table.bootstrapTable('getSelections');
        if (rowSelected.length < 0)
            return;
        var delSuccess = false;
        itemsId = [];
        var negativeItemsId = [];
        for (var i = 0; i < rowSelected.length; i++)
        {
            if(rowSelected[i].Id>0)
            {
                itemsId.push(rowSelected[i].Id);
            }
            else
            {
                negativeItemsId.push(rowSelected[i].Id);
            }
        }

        //移除编号为负的行，即没有保存到数据库中的项
        table.bootstrapTable('remove', { field: 'Id', values: negativeItemsId });
        if (itemsId.length == 0)
            return;
        $.ajax({
            type: "Post",
            url: "WareHouse/DeleteWareHouse",
            data: { wareHouseIdList: itemsId },
            success: function (data) {
                if(data.result)
                    toastr.success("删除成功! ");
                else
                    toastr.error('删除失败,请稍后重试！');
                table.bootstrapTable('refresh', {});
            },
            error: function () {
                toastr.error('删除失败,请稍后重试！');
                table.bootstrapTable('refresh', {});
            }
        });
    });

    var nextAddItemId = -1;
    var table = $("#tb_warehouse");
    var addButton = $("#btn_add");
    addButton.click(function () {
        table.bootstrapTable('insertRow', { index: 0, row: { Id: nextAddItemId, Name: "", Location: "", totalStorage: "0", Capacity: "0" } });
        nextAddItemId = nextAddItemId - 1;
    });
    var saveButton = $("#btn_save");
    saveButton.click(function () {

        var rowSelected = table.bootstrapTable('getSelections');
        //可以进行保存的仓库项
        var to_save_items = [];
        for (var i = 0; i < rowSelected.length; i++) {
            row = rowSelected[i];
            if (row.Id < 0) {
                //如果某行数据的某列无效，不进行保存
                for (var column in row) {
                    if (row[column] == "") {
                        toastr.error('数据有误！')
                        return;
                    }
                }
                to_save_items.push(row);
            }
        }
        if (to_save_items.length == 0) {
            toastr.info("没有要进行保存的数据！");
        }
        else {
            $.ajax({
                type: "Post",
                url: "/WareHouse/AddWareHosue",
                data: { wareHouseList: to_save_items },
                success: function (data) {
                    if (data.result) {
                        toastr.success("数据保存成功！");
                    }
                    else {
                        toastr.error("数据保存失败，请稍后重试！");
                    }
                    table.bootstrapTable('refresh', {});
                },
                error: function () {
                    toastr.error("数据保存失败，请稍后重试！");
                    table.bootstrapTable('refresh', {});
                }
            });
        }
    });

    function canDelete()
    {
        var rowSelected = table.bootstrapTable('getSelections');
        for(var i=0;i<rowSelected.length;i++)
        {
            if (rowSelected[i].totalStorage > 0)
                return false;
        }
        return true;
    }
</script>

